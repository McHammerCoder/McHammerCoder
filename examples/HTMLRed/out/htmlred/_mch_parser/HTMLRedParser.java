/* generated from model null*/
/* generated by template mchparser.Parser*/


package htmlred._mch_parser;

import com.upstandinghackers.hammer.*;

public class HTMLRedParser
{
	// Load Hammer Library via JNI
	static 
	{
		try 
		{
			System.loadLibrary("jhammer");
			System.loadLibrary("jhammer_actions");
		} 
		catch (UnsatisfiedLinkError e) 
		{
			throw new RuntimeException(e);
		}
	}
	
	/** Binary Fragment Token **/
	
	private com.upstandinghackers.hammer.Parser ubit = Hammer.bits(1, false);
	private com.upstandinghackers.hammer.Parser bit = Hammer.bits(1, true);
	
	private com.upstandinghackers.hammer.Parser bit0 = Hammer.intRange( ubit, 0, 0);
	private com.upstandinghackers.hammer.Parser bit1 = Hammer.intRange( ubit, 1, 1);
	
	/** Binary Token **/
	
	private com.upstandinghackers.hammer.Parser uInt_8 = Hammer.uInt8();
	private com.upstandinghackers.hammer.Parser uInt_16 = Hammer.uInt16();
	private com.upstandinghackers.hammer.Parser uInt_32 = Hammer.uInt32();
	private com.upstandinghackers.hammer.Parser uInt_64 = Hammer.uInt64();
	
	private com.upstandinghackers.hammer.Parser int_8 = Hammer.int8();
	private com.upstandinghackers.hammer.Parser int_16 = Hammer.int16();
	private com.upstandinghackers.hammer.Parser int_32 = Hammer.int32();
	private com.upstandinghackers.hammer.Parser int_64 = Hammer.int64();
	
	/** Indirect Parsers **/
	
	private final com.upstandinghackers.hammer.Parser textb = Hammer.indirect();
	private final com.upstandinghackers.hammer.Parser p = Hammer.indirect();
	private final com.upstandinghackers.hammer.Parser alternatives = Hammer.indirect();
	private final com.upstandinghackers.hammer.Parser b = Hammer.indirect();
	private final com.upstandinghackers.hammer.Parser i = Hammer.indirect();
	
	/** Final Parser **/
	
	com.upstandinghackers.hammer.Parser parser = Hammer.nothingP();

	/** Constructor **/
	public HTMLRedParser()
	{
		
 // Start of 'ASTLexProd'
		textb.bindIndirect( 
		  Hammer.action( 
		    Hammer.choice( 
		      Hammer.sequence( 
		        Hammer.action( 
		          Hammer.many1( 
		            Hammer.choice( 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 97, 122)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 65, 90)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 95, 95)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 48, 57)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 32, 32)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 35, 35)
		                ) 
		              , "actUndefined" ), 
		              Hammer.action( 
		                Hammer.sequence( 
		                  Hammer.intRange( uInt_16, 36, 36)
		                ) 
		              , "actUndefined" )
		            )
		          )
		        , "actUndefined" )
		      ) 
		    )
		  , "actTEXTB" )
		);
	
		
 // Start of 'ASTClassProd'
		p.bindIndirect( 
		  Hammer.action( 
		    Hammer.choice( 
		      Hammer.sequence( 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 112, 112), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_5" ), 
		        Hammer.action( 
		          Hammer.many( 
		            Hammer.choice( 
		              Hammer.action( 
		                Hammer.sequence( 
		                  alternatives
		                ) 
		              , "actUndefined" )
		            )
		          )
		        , "actUndefined" ), 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 47, 47), 
		            Hammer.intRange( uInt_16, 112, 112), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_6" )
		      ) 
		    )
		  , "actP" )
		);
		
 // Start of 'ASTClassProd'
		alternatives.bindIndirect( 
		  Hammer.action( 
		    Hammer.choice( 
		      Hammer.sequence( 
		        p
		      ) , 
		      Hammer.sequence( 
		        b
		      ) , 
		      Hammer.sequence( 
		        i
		      ) , 
		      Hammer.sequence( 
		        textb
		      ) 
		    )
		  , "actAlternatives" )
		);
		
 // Start of 'ASTClassProd'
		b.bindIndirect( 
		  Hammer.action( 
		    Hammer.choice( 
		      Hammer.sequence( 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 98, 98), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_4" ), 
		        textb, 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 47, 47), 
		            Hammer.intRange( uInt_16, 98, 98), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_2" )
		      ) 
		    )
		  , "actB" )
		);
		
 // Start of 'ASTClassProd'
		i.bindIndirect( 
		  Hammer.action( 
		    Hammer.choice( 
		      Hammer.sequence( 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 105, 105), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_1" ), 
		        textb, 
		        Hammer.action( 
		          Hammer.sequence( 
		            Hammer.intRange( uInt_16, 60, 60), 
		            Hammer.intRange( uInt_16, 47, 47), 
		            Hammer.intRange( uInt_16, 105, 105), 
		            Hammer.intRange( uInt_16, 62, 62) 
		          )
		        , "actTT_3" )
		      ) 
		    )
		  , "actI" )
		);

		parser = p ;
	}

	/**
	 * parses a binary input
	 * @param bytes DNS-message
	 * @return Antlr-ParseTree
	 */
	public ParseResult parse( byte[] bytes )
	{
		return Hammer.parse(parser, bytes, bytes.length);
	}
}