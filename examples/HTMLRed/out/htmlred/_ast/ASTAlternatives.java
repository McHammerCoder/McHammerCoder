/* generated from model null*/
/* generated by template ast.AstClass*/

package htmlred._ast;

/* generated by template ast.AstImports*/
import java.util.Optional;
import de.monticore.symboltable.Symbol;
import de.monticore.symboltable.Scope;
import de.se_rwth.commons.logging.Log;
import java.util.Iterator;


 public  class ASTAlternatives extends /* generated by template ast.AstSuperTypes*/
de.monticore.ast.ASTCNode implements  ASTHTMLRedNode
 {
  /* generated by template ast.Attribute*/
   protected  Optional<htmlred._ast.ASTP> p = Optional.empty();

  /* generated by template ast.Attribute*/
   protected  Optional<htmlred._ast.ASTB> b = Optional.empty();

  /* generated by template ast.Attribute*/
   protected  Optional<htmlred._ast.ASTI> i = Optional.empty();

  /* generated by template ast.Attribute*/
   protected  Optional<String> tEXTB = Optional.empty();

  /* generated by template ast.Attribute*/
   public  Optional<? extends Symbol> symbol = Optional.empty();

  /* generated by template ast.Attribute*/
   public  Optional<? extends Scope> enclosingScope = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTAlternatives (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTAlternatives (/* generated by template ast.ConstructorParametersDeclaration*/
     htmlred._ast.ASTP p 
    ,
     htmlred._ast.ASTB b 
    ,
     htmlred._ast.ASTI i 
    ,
     String tEXTB 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setP(p);
    setB(b);
    setI(i);
    setTEXTB(tEXTB);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(htmlred._visitor.HTMLRedVisitor visitor)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_610 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_707 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTAlternatives comp;
    if ((o instanceof ASTAlternatives)) {
      comp = (ASTAlternatives) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing p   
    if ( this.p.isPresent() != comp.p.isPresent() ||
      (this.p.isPresent() && !this.p.get().deepEquals(comp.p.get())) ) {
      return false;
    }
    // comparing b   
    if ( this.b.isPresent() != comp.b.isPresent() ||
      (this.b.isPresent() && !this.b.get().deepEquals(comp.b.get())) ) {
      return false;
    }
    // comparing i   
    if ( this.i.isPresent() != comp.i.isPresent() ||
      (this.i.isPresent() && !this.i.get().deepEquals(comp.i.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_089 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_566 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTAlternatives comp;
    if ((o instanceof ASTAlternatives)) {
      comp = (ASTAlternatives) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing p
    if ( this.p.isPresent() != comp.p.isPresent() ||
      (this.p.isPresent() && !this.p.get().deepEqualsWithComments(comp.p.get())) ) {
      return false;
    }
    // comparing b
    if ( this.b.isPresent() != comp.b.isPresent() ||
      (this.b.isPresent() && !this.b.get().deepEqualsWithComments(comp.b.get())) ) {
      return false;
    }
    // comparing i
    if ( this.i.isPresent() != comp.i.isPresent() ||
      (this.i.isPresent() && !this.i.get().deepEqualsWithComments(comp.i.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_083 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_117 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTAlternatives comp;
    if ((o instanceof ASTAlternatives)) {
      comp = (ASTAlternatives) o;
    } else {
      return false;
    }
	// comparing tEXTB 
    if ( this.tEXTB.isPresent() != comp.tEXTB.isPresent() ||
       (this.tEXTB.isPresent() && !this.tEXTB.get().equals(comp.tEXTB.get())) ) {
      return false;
    }
	// comparing symbol 
    if ( this.symbol.isPresent() != comp.symbol.isPresent() ||
       (this.symbol.isPresent() && !this.symbol.get().equals(comp.symbol.get())) ) {
      return false;
    }
	// comparing enclosingScope 
    if ( this.enclosingScope.isPresent() != comp.enclosingScope.isPresent() ||
       (this.enclosingScope.isPresent() && !this.enclosingScope.get().equals(comp.enclosingScope.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_842 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTAlternatives comp;
    if ((o instanceof ASTAlternatives)) {
      comp = (ASTAlternatives) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()
   
    { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
    if ( getP().isPresent()) {
      result.add ( getP().get());
    }
    if ( getB().isPresent()) {
      result.add ( getB().get());
    }
    if ( getI().isPresent()) {
      result.add ( getI().get());
    }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_631 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

    if (getP().isPresent() && getP().get() == child) {
      setP(null);
    }
    if (getB().isPresent() && getB().get() == child) {
      setB(null);
    }
    if (getI().isPresent() && getI().get() == child) {
      setI(null);
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()
   
    { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTAlternatives deepClone()
   
    { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTAlternatives deepClone(ASTAlternatives result)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_159 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.p = this.p.isPresent()? Optional.ofNullable((htmlred._ast.ASTP)this.p.get().deepClone()) : Optional.empty();
    result.b = this.b.isPresent()? Optional.ofNullable((htmlred._ast.ASTB)this.b.get().deepClone()) : Optional.empty();
    result.i = this.i.isPresent()? Optional.ofNullable((htmlred._ast.ASTI)this.i.get().deepClone()) : Optional.empty();
    result.tEXTB = this.tEXTB.isPresent()? Optional.ofNullable((String)this.tEXTB.get()) : Optional.empty();
    result.symbol = this.symbol.isPresent()? Optional.ofNullable((Symbol)this.symbol.get()) : Optional.empty();
    result.enclosingScope = this.enclosingScope.isPresent()? Optional.ofNullable((Scope)this.enclosingScope.get()) : Optional.empty();
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTAlternatives _construct()
   
    { 
     
     return new ASTAlternatives();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<htmlred._ast.ASTP> getP()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.p;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<htmlred._ast.ASTB> getB()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.b;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<htmlred._ast.ASTI> getI()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.i;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<String> getTEXTB()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.tEXTB;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<? extends Symbol> getSymbol()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.symbol;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<? extends Scope> getEnclosingScope()
   
    { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.enclosingScope;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setP(htmlred._ast.ASTP p)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.p = Optional.ofNullable(p);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean pIsPresent()
   
    { 
     
       return p.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setB(htmlred._ast.ASTB b)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.b = Optional.ofNullable(b);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean bIsPresent()
   
    { 
     
       return b.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setI(htmlred._ast.ASTI i)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.i = Optional.ofNullable(i);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean iIsPresent()
   
    { 
     
       return i.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTEXTB(String tEXTB)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.tEXTB = Optional.ofNullable(tEXTB);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean tEXTBIsPresent()
   
    { 
     
       return tEXTB.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSymbol(Symbol symbol)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.symbol = Optional.ofNullable(symbol);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean symbolIsPresent()
   
    { 
     
       return symbol.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setEnclosingScope(Scope enclosingScope)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.enclosingScope = Optional.ofNullable(enclosingScope);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean enclosingScopeIsPresent()
   
    { 
     
       return enclosingScope.isPresent(); 

  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTAlternatives}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  htmlred._ast.ASTP p;

    /* generated by template ast.BuilderAttribute*/
     protected  htmlred._ast.ASTB b;

    /* generated by template ast.BuilderAttribute*/
     protected  htmlred._ast.ASTI i;

    /* generated by template ast.BuilderAttribute*/
     protected  String tEXTB;

    public ASTAlternatives build() {
      return new ASTAlternatives (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.p 
       ,
       this.b 
       ,
       this.i 
       ,
       this.tEXTB 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder p(htmlred._ast.ASTP p) {
      this.p = p;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder b(htmlred._ast.ASTB b) {
      this.b = b;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder i(htmlred._ast.ASTI i) {
      this.i = i;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder tEXTB(String tEXTB) {
      this.tEXTB = tEXTB;
      return this;
    }

  }    

  
}
