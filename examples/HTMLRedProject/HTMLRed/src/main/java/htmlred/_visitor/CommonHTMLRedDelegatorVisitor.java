/* generated from model null*/
/* generated by template visitor.CommonDelegatorVisitor*/



package htmlred._visitor;

import java.util.Optional;

import de.se_rwth.commons.logging.Log;

/**
 * Common delegator visitor for the <code>HTMLRed</code>
 * language.<br/>
 * <br/>
 * @see HTMLRedDelegatorVisitor
 */
public class CommonHTMLRedDelegatorVisitor implements HTMLRedDelegatorVisitor {

  private HTMLRedDelegatorVisitor realThis = this;

  @Override
  public void setRealThis(HTMLRedVisitor realThis) {
    if (this.realThis != realThis) {
      if (!(realThis instanceof HTMLRedDelegatorVisitor)) {
          Log.error("0xA7111_851 realThis of HTMLRedDelegatorVisitor must be HTMLRedDelegatorVisitor itself.");
      }
      this.realThis = (HTMLRedDelegatorVisitor) realThis;
      // register the known delegates to the realThis (and therby also set their new realThis)
        if (this.htmlred__visitor_HTMLRedVisitor.isPresent()) {
          this.set_htmlred__visitor_HTMLRedVisitor(htmlred__visitor_HTMLRedVisitor.get());
        }
    }
  }

  @Override
  public HTMLRedDelegatorVisitor getRealThis() {
    return realThis;
  }

    
    
    private Optional<htmlred._visitor.HTMLRedVisitor> htmlred__visitor_HTMLRedVisitor = Optional.empty();
    
    public void set_htmlred__visitor_HTMLRedVisitor(htmlred._visitor.HTMLRedVisitor htmlred__visitor_HTMLRedVisitor) {
      this.htmlred__visitor_HTMLRedVisitor = Optional.ofNullable(htmlred__visitor_HTMLRedVisitor);
      if (this.htmlred__visitor_HTMLRedVisitor.isPresent()) {
        this.htmlred__visitor_HTMLRedVisitor.get().setRealThis(getRealThis());
      }
      // register the htmlred._visitor.HTMLRedVisitor also to realThis if not this
      if (getRealThis() != this) {
        // to prevent recursion we must differentiate between realThis being
        // the current this or another instance.
        getRealThis().set_htmlred__visitor_HTMLRedVisitor(htmlred__visitor_HTMLRedVisitor);
      }
    }

    public Optional<htmlred._visitor.HTMLRedVisitor> get_htmlred__visitor_HTMLRedVisitor() {
      return htmlred__visitor_HTMLRedVisitor;
    }

}
