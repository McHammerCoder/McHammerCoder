/* generated from model null*/
/* generated by template mchtree.TreeHelper*/


package htmlred._mch_parser.tree;

import java.util.LinkedList;
import com.upstandinghackers.hammer.*;

/**
 * Used by the TreeFactory to create an Antlr-ParseTree from a Hammer.ParseResult
 */
public class HTMLRedTreeHelper 
{
	private static LinkedList<Context> postfixTree = new LinkedList<Context>();
	
	public static void push(Context context)
	{
		postfixTree.push(context);
	}
	
	public static Context pop()
	{
		return postfixTree.pop();
	}
	
	public static Context get()
	{
		return postfixTree.getLast();
	}
	
	public static int size()
	{
		return postfixTree.size();
	}
	
	public static interface Context
	{
		
	}
	
	public static class RuleContext implements Context
	{
		private RuleType type;
		/**
		 * @return the type
		 */
		public RuleType getType() 
		{
			return type;
		}
		
		public RuleContext(RuleType type)
		{
			this.type = type;
		}
	}
	
	public static class TokenContext implements Context
	{
		private TokenType type;
		/**
		 * @return the type
		 */
		public TokenType getType() 
		{
			return type;
		}
		
		public TokenContext(TokenType type)
		{
			this.type = type;
		}
	}
	
	public enum UserTokenTypes
	{
		UTT_Undefined(Hammer.TokenType.USER.getValue()),
		UTT_P(Hammer.TokenType.USER.getValue()+1),
		UTT_Alternatives(Hammer.TokenType.USER.getValue()+2),
		UTT_B(Hammer.TokenType.USER.getValue()+3),
		UTT_I(Hammer.TokenType.USER.getValue()+4),
		UTT_1(Hammer.TokenType.USER.getValue()+5),
		UTT_2(Hammer.TokenType.USER.getValue()+6),
		UTT_3(Hammer.TokenType.USER.getValue()+7),
		UTT_4(Hammer.TokenType.USER.getValue()+8),
		UTT_5(Hammer.TokenType.USER.getValue()+9),
		UTT_6(Hammer.TokenType.USER.getValue()+10),
		UTT_TEXTB(Hammer.TokenType.USER.getValue()+11),
		UTT_END(Hammer.TokenType.USER.getValue()+12);

		UserTokenTypes(int numValue)
		{
			this.numValue = numValue;
		}
		
		private int numValue;
		
		public int getValue()
		{
			return numValue;
		}
		
	};
	
	public enum Type
	{
		C_Token,
		C_Rule
	};
	
	public enum TokenType
	{
		TT_1,
		TT_2,
		TT_3,
		TT_4,
		TT_5,
		TT_6,
		TT_TEXTB,
		TT_END		
	}
	
	public static String [] TokenTypeNames =
	{
		"TT_1",
		"TT_2",
		"TT_3",
		"TT_4",
		"TT_5",
		"TT_6",
		"TEXTB",
		"TT_END"
	};
	
	public static String [] Literals =
	{
		"'<p>'",
		"'</p>'",
		"'<b>'",
		"'</b>'",
		"'<i>'",
		"'</i>'",
		""
	};
	
	public enum RuleType
	{
		RT_P,
		RT_Alternatives,
		RT_B,
		RT_I,
		RT_Undefined
	}
	
	public static String [] RuleTypeNames =
	{
		"P",
		"Alternatives",
		"B",
		"I",
		"Undefined"
	};
}