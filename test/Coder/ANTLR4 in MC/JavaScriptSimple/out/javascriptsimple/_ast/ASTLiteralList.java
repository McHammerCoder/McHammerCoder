/* generated from model null*/
/* generated by template ast.AstClass*/

package javascriptsimple._ast;

/* generated by template ast.ListImports*/
import static com.google.common.collect.Lists.newArrayList;

import java.util.*;
import de.se_rwth.commons.SourcePosition;
import de.monticore.ast.*;
import de.se_rwth.commons.logging.Log;


 public  class ASTLiteralList extends /* generated by template ast.AstSuperTypesList*/
de.monticore.ast.ASTCList implements java.lang.Iterable<ASTLiteral>
, java.util.List<ASTLiteral>
, ASTJavaScriptSimpleNode {
  /* generated by template ast.Attribute*/
   protected  ArrayList<ASTLiteral> list = new java.util.ArrayList<>();

  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(javascriptsimple._visitor.JavaScriptSimpleVisitor visitor)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_774 Parameter 'visitor' must not be null.");
 
     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

   
  /* generated by template ast.AstListMethods*/
 
  protected ASTLiteralList () {
    list = newArrayList();
    set_Existent(false);
  }
  
  protected ASTLiteralList (boolean strictlyOrdered) {
    this();
    this._strictlyOrdered = strictlyOrdered;
  }
  
  protected ArrayList<ASTLiteral> getList() {
    return list;
  }
  
  protected void setList(ArrayList<ASTLiteral> list) {
    this.list = list;
    set_Existent(false);
  }
  
  public void add(int index, ASTLiteral o) {
    if (!is_Existent()) {
      set_Existent(true);
    }
    list.add(index, o);
  }
  
  public boolean add(ASTLiteral o) {
    if (!is_Existent()) {
      set_Existent(true);
    }
    list.add(o);
    return true;
  }
  
  public void clear() {
    list.clear();
  }
  
  public boolean contains(ASTLiteral o) {
    return list.contains(o);
  }
  
  public boolean equals(ASTLiteralList o) {
    return list.equals(o.getList());
  }
  
  public ASTLiteral get(int index) {
    return list.get(index);
  }
  
  public int hashCode() {
    return list.hashCode();
  }
  
  public int indexOf(ASTLiteral o) {
    return list.indexOf(o);
  }
  
  public boolean isEmpty() {
    return list.isEmpty();
  }
  
  public Iterator<ASTLiteral> iterator() {
    return new TemplateListIterator((ASTLiteralList) this, 0);
  }
  
  public int lastIndexOf(ASTLiteral o) {
    return list.lastIndexOf(o);
  }
  
  public ASTLiteral remove(int index) {
    return list.remove(index);
  }
  
  public boolean remove(ASTLiteral o) {
    return list.remove(o);
  }
  
  public ASTLiteral set(int index, ASTLiteral o) {
    return list.set(index, o);
  }
  
  public int size() {
    return list.size();
  }
  
  public ASTLiteral[] toArray() {
    ASTLiteral[] result = new ASTLiteral[list.size()];
    list.toArray(result);
    return result;
  }
  
  public SourcePosition getStart() {
    if (list.size() != 0) {
      return get(0).get_SourcePositionStart();
    }
    return null;
  }
  
  public SourcePosition getEnd() {
    if (list.size() != 0) {
      return get(list.size() - 1).get_SourcePositionEnd();
    }
    return null;
  }
  
  public ASTLiteralList deepClone() {
    ASTLiteralList result = new ASTLiteralList();
    if (list.size() != 0) {
      Iterator< ASTLiteral> iter = iterator();
      while (iter.hasNext()) {
        result.add((ASTLiteral) iter.next().deepClone());
      }
    }
    for (de.monticore.ast.Comment x : get_PreComments()) {
      result.get_PreComments().add(new de.monticore.ast.Comment(x.getText()));
    }
    for (de.monticore.ast.Comment x : get_PostComments()) {
      result.get_PostComments().add(new de.monticore.ast.Comment(x.getText()));
    }
    return result;
  }
    
  public boolean addAll(Collection<? extends ASTLiteral> c) {
    boolean r = false;
    for (ASTLiteral n : c) {
      this.add(n);
      r = true;
     }
     return r;
  }
  
  public boolean addAll(int index, Collection<? extends ASTLiteral> c) {
    boolean r = false;
    int idx = index;
    for (ASTLiteral n : c) {
      this.add(idx++, n);
      r = true;
    }
    return r;
  }
  
  public boolean contains(Object o) {
    return list.contains(o);
  }
  
  public boolean containsAll(Collection<?> c) {
    return list.containsAll(c);
  }
  
  public int indexOf(Object o) {
    return list.indexOf(o);
  }
  
  public int lastIndexOf(Object o) {
    return list.lastIndexOf(o);
  }
  
  public ListIterator<ASTLiteral> listIterator() {
    return new TemplateListIterator((ASTLiteralList) this, 0);
  }
  
  public ListIterator<ASTLiteral> listIterator(int index) {
    return new TemplateListIterator((ASTLiteralList) this, 0);
  }
  
  public boolean remove(Object o) {
    return list.remove(o);
  }
  
  public void remove_Child(de.monticore.ast.ASTNode child) {
    remove(child);
  }
  
  public boolean removeAll(Collection<?> c) {
    boolean r = false;
    for (Object o : c) {
      r = r | this.remove(o);
    }
    return r;
  }
  
  public boolean retainAll(Collection<?> c) {
    boolean r = false;
    Iterator<?> i = this.iterator();
    while (i.hasNext()) {
      Object o = i.next();
      if (!c.contains(o)) {
        i.remove();
        r = true;
      }
    }
    return r;
  }
  
  public List<ASTLiteral> subList(int fromIndex, int toIndex) {
    return list.subList(fromIndex, toIndex);
  }
  
  public <T> T[] toArray(T[] a) {
    return list.toArray(a);
  }
  
  @Override
  @SuppressWarnings("unchecked")    
  public ASTLiteralList clone() {
    ASTLiteralList ret = new ASTLiteralList();
    ret.setList((ArrayList<ASTLiteral>) list.clone());
    return ret;
  }
  
  public boolean equalAttributes(Object o) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      java.util.Iterator<ASTLiteral> one = this.iterator();
      java.util.Iterator<ASTLiteral> two = comp.iterator();
      while (one.hasNext()) {
        if (!one.next().equalAttributes(two.next())) {
          return false;
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  public boolean equalsWithComments(Object o) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      java.util.Iterator<ASTLiteral> one = this.iterator();
      java.util.Iterator<ASTLiteral> two = comp.iterator();
      while (one.hasNext()) {
        if (!one.next().equalsWithComments(two.next())) {
          return false;
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  public boolean deepEquals(Object o) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      if (isStrictlyOrdered()) {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        java.util.Iterator<ASTLiteral> two = comp.iterator();
        while (one.hasNext()) {
          if (!one.next().deepEquals(two.next())) {
            return false;
          }
        }
      }
      else {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        while (one.hasNext()) {
          ASTLiteral oneNext = one.next();
          boolean matchFound = false;
          java.util.Iterator<ASTLiteral> two = comp.iterator();
          while (two.hasNext()) {
            if (oneNext.deepEquals(two.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  public boolean deepEqualsWithComments(Object o) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      if (isStrictlyOrdered()) {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        java.util.Iterator<ASTLiteral> two = comp.iterator();
        while (one.hasNext()) {
          if (!one.next().deepEqualsWithComments(two.next())) {
            return false;
          }
        }
      }
      else {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        while (one.hasNext()) {
          ASTLiteral oneNext = one.next();
          boolean matchFound = false;
          java.util.Iterator<ASTLiteral> two = comp.iterator();
          while (two.hasNext()) {
            if (oneNext.deepEqualsWithComments(two.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  public boolean deepEquals(Object o, boolean forceSameOrder) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      if (forceSameOrder) {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        java.util.Iterator<ASTLiteral> two = comp.iterator();
        while (one.hasNext()) {
          if (!one.next().deepEquals(two.next(), forceSameOrder)) {
            return false;
          }
        }
      }
      else {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        while (one.hasNext()) {
          ASTLiteral oneNext = one.next();
          boolean matchFound = false;
          java.util.Iterator<ASTLiteral> two = comp.iterator();
          while (two.hasNext()) {
            if (oneNext.deepEquals(two.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  public boolean deepEqualsWithComments(Object o, boolean forceSameOrder) {
    ASTLiteralList comp;
    if ((o instanceof ASTLiteralList)) {
      comp = (ASTLiteralList) o;
    }
    else {
      return false;
    }
    if (this.size() == comp.size()) {
      if (forceSameOrder) {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        while (one.hasNext()) {
          ASTLiteral oneNext = one.next();
          boolean matchFound = false;
          java.util.Iterator<ASTLiteral> two = comp.iterator();
          while (two.hasNext()) {
            if (oneNext.deepEqualsWithComments(two.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
      else {
        java.util.Iterator<ASTLiteral> one = this.iterator();
        java.util.Iterator<ASTLiteral> two = comp.iterator();
        while (one.hasNext()) {
          if (!one.next().deepEqualsWithComments(two.next(), forceSameOrder)) {
            return false;
          }
        }
      }
    }
    else {
      return false;
    }
    return true;
  }
  
  private class TemplateListIterator implements ListIterator<ASTLiteral> {
    private ListIterator<ASTLiteral> it;
    private ASTLiteralList t;
    private ASTLiteral lastRet = null;
    
    TemplateListIterator(ASTLiteralList t, int index) {
      this.t = t;
      this.it = list.listIterator(index);
    }
    
    public boolean hasNext() {
      return it.hasNext();
    }
    
    public ASTLiteral next() {
      lastRet = it.next();
      return lastRet;
    }
    
    public boolean hasPrevious() {
      return it.hasPrevious();
    }
    
    public ASTLiteral previous() {
      lastRet = it.previous();
      return lastRet;
    }
    
    public int nextIndex() {
      return it.nextIndex();
    }
    
    public int previousIndex() {
      return it.previousIndex();
    }
    
    public void remove() {
      if (lastRet != null) {
        lastRet = null;
      }
      it.remove();
    }
    
    public void set(ASTLiteral o) {
      if (lastRet != null) {
        lastRet = null;
      }
      it.set(o);
    }
    
    public void add(ASTLiteral o) {
      it.add(o);
      if (!t.is_Existent())
        t.set_Existent(true);
      }        
    }


  
}