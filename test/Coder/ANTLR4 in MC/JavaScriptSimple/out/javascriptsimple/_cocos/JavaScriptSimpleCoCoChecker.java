/* generated from model null*/
/* generated by template cocos.CoCoChecker*/



package javascriptsimple._cocos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.HashSet;

import javascriptsimple._ast.ASTJavaScriptSimpleNode;
import javascriptsimple._visitor.JavaScriptSimpleVisitor;
import javascriptsimple._visitor.JavaScriptSimpleInheritanceVisitor;

/**
 * This class is capable of checking context conditions of the language and all
 * their super languages. Beside such composition of single context conditions
 * ({@code addCoCo(...)}) it also allows composing of existing checkers of
 * the language itself and checkers of (transitive) super languages
 * ({@code addChecker(...)}). Composing multiple checkers of the same (super)
 * language is possible. The composed checkers are not modified. Also it is
 * supported to mix both composing existing checkers as well as single.<br/>
 * <b>Keep in mind</b> that context conditions are executed multiple-times if
 * added multiple times. This might be tricky when multiple composed checkers
 * hold the same context condition.<br/>
 * <br/>
 * <b>Add context conditions</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Add checkers</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Execute all</b> registered context conditions and checkers by calling
 * {@link #checkAll(ASTJavaScriptSimpleNode)}.
 * 
 * @author Robert Heim
 */
public class JavaScriptSimpleCoCoChecker implements JavaScriptSimpleInheritanceVisitor {

  public JavaScriptSimpleCoCoChecker() {
  }

  // --- realThis-Pattern ---
  
  private JavaScriptSimpleVisitor realThis = this;

  @Override
  public JavaScriptSimpleVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(JavaScriptSimpleVisitor realThis) {
    this.realThis = realThis;
  }
  
  // --- /realThis-Pattern ---
  
  /**
   * Executes all registered context conditions and checkers on the given ast.
   * @param node the node to check the context conditions on.
   */
  public void checkAll(ASTJavaScriptSimpleNode node) {
    // start the double-dispatch visitor
    // checks are performed in the visit methods.
    node.accept(getRealThis());
  }


      private List<javascriptsimple._cocos.JavaScriptSimpleCoCoChecker> javascriptsimple__cocos_JavaScriptSimpleCoCoChecker = new ArrayList<>();

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code javascriptsimple._cocos.JavaScriptSimpleCoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTJavaScriptSimpleNode)
     */
    public void addChecker(javascriptsimple._cocos.JavaScriptSimpleCoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.add(checker);
    }


          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramCoCo> javascriptsimple__ast_ASTJavaScriptProgramCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramCoCo coco) {
            javascriptsimple__ast_ASTJavaScriptProgramCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTJavaScriptProgram node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramCoCo coco : javascriptsimple__ast_ASTJavaScriptProgramCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsCoCo> javascriptsimple__ast_ASTSourceElementsCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsCoCo coco) {
            javascriptsimple__ast_ASTSourceElementsCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSourceElements node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsCoCo coco : javascriptsimple__ast_ASTSourceElementsCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSourceElementCoCo> javascriptsimple__ast_ASTSourceElementCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSourceElementCoCo coco) {
            javascriptsimple__ast_ASTSourceElementCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSourceElement node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSourceElementCoCo coco : javascriptsimple__ast_ASTSourceElementCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTStatementCoCo> javascriptsimple__ast_ASTStatementCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTStatementCoCo coco) {
            javascriptsimple__ast_ASTStatementCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTStatement node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTStatementCoCo coco : javascriptsimple__ast_ASTStatementCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTStatementsCoCo> javascriptsimple__ast_ASTStatementsCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTStatementsCoCo coco) {
            javascriptsimple__ast_ASTStatementsCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTStatements node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTStatementsCoCo coco : javascriptsimple__ast_ASTStatementsCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementCoCo> javascriptsimple__ast_ASTVariableStatementCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementCoCo coco) {
            javascriptsimple__ast_ASTVariableStatementCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableStatement node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementCoCo coco : javascriptsimple__ast_ASTVariableStatementCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsCoCo> javascriptsimple__ast_ASTVariableDeclarationsCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsCoCo coco) {
            javascriptsimple__ast_ASTVariableDeclarationsCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableDeclarations node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsCoCo coco : javascriptsimple__ast_ASTVariableDeclarationsCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationCoCo> javascriptsimple__ast_ASTVariableDeclarationCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationCoCo coco) {
            javascriptsimple__ast_ASTVariableDeclarationCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableDeclaration node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationCoCo coco : javascriptsimple__ast_ASTVariableDeclarationCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTInitialiserCoCo> javascriptsimple__ast_ASTInitialiserCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTInitialiserCoCo coco) {
            javascriptsimple__ast_ASTInitialiserCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTInitialiser node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTInitialiserCoCo coco : javascriptsimple__ast_ASTInitialiserCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceCoCo> javascriptsimple__ast_ASTExpressionSequenceCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceCoCo coco) {
            javascriptsimple__ast_ASTExpressionSequenceCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTExpressionSequence node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceCoCo coco : javascriptsimple__ast_ASTExpressionSequenceCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionCoCo> javascriptsimple__ast_ASTSingleExpressionCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionCoCo coco) {
            javascriptsimple__ast_ASTSingleExpressionCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSingleExpression node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionCoCo coco : javascriptsimple__ast_ASTSingleExpressionCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTLiteralCoCo> javascriptsimple__ast_ASTLiteralCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTLiteralCoCo coco) {
            javascriptsimple__ast_ASTLiteralCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTLiteral node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTLiteralCoCo coco : javascriptsimple__ast_ASTLiteralCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralCoCo> javascriptsimple__ast_ASTNumericLiteralCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralCoCo coco) {
            javascriptsimple__ast_ASTNumericLiteralCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTNumericLiteral node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralCoCo coco : javascriptsimple__ast_ASTNumericLiteralCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTEOSCoCo> javascriptsimple__ast_ASTEOSCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTEOSCoCo coco) {
            javascriptsimple__ast_ASTEOSCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTEOS node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTEOSCoCo coco : javascriptsimple__ast_ASTEOSCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramListCoCo> javascriptsimple__ast_ASTJavaScriptProgramListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramListCoCo coco) {
            javascriptsimple__ast_ASTJavaScriptProgramListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTJavaScriptProgramList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptProgramListCoCo coco : javascriptsimple__ast_ASTJavaScriptProgramListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsListCoCo> javascriptsimple__ast_ASTSourceElementsListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsListCoCo coco) {
            javascriptsimple__ast_ASTSourceElementsListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSourceElementsList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSourceElementsListCoCo coco : javascriptsimple__ast_ASTSourceElementsListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSourceElementListCoCo> javascriptsimple__ast_ASTSourceElementListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSourceElementListCoCo coco) {
            javascriptsimple__ast_ASTSourceElementListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSourceElementList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSourceElementListCoCo coco : javascriptsimple__ast_ASTSourceElementListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTStatementListCoCo> javascriptsimple__ast_ASTStatementListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTStatementListCoCo coco) {
            javascriptsimple__ast_ASTStatementListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTStatementList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTStatementListCoCo coco : javascriptsimple__ast_ASTStatementListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTStatementsListCoCo> javascriptsimple__ast_ASTStatementsListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTStatementsListCoCo coco) {
            javascriptsimple__ast_ASTStatementsListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTStatementsList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTStatementsListCoCo coco : javascriptsimple__ast_ASTStatementsListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementListCoCo> javascriptsimple__ast_ASTVariableStatementListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementListCoCo coco) {
            javascriptsimple__ast_ASTVariableStatementListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableStatementList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableStatementListCoCo coco : javascriptsimple__ast_ASTVariableStatementListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsListCoCo> javascriptsimple__ast_ASTVariableDeclarationsListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsListCoCo coco) {
            javascriptsimple__ast_ASTVariableDeclarationsListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableDeclarationsList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationsListCoCo coco : javascriptsimple__ast_ASTVariableDeclarationsListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationListCoCo> javascriptsimple__ast_ASTVariableDeclarationListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationListCoCo coco) {
            javascriptsimple__ast_ASTVariableDeclarationListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTVariableDeclarationList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTVariableDeclarationListCoCo coco : javascriptsimple__ast_ASTVariableDeclarationListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTInitialiserListCoCo> javascriptsimple__ast_ASTInitialiserListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTInitialiserListCoCo coco) {
            javascriptsimple__ast_ASTInitialiserListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTInitialiserList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTInitialiserListCoCo coco : javascriptsimple__ast_ASTInitialiserListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceListCoCo> javascriptsimple__ast_ASTExpressionSequenceListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceListCoCo coco) {
            javascriptsimple__ast_ASTExpressionSequenceListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTExpressionSequenceList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTExpressionSequenceListCoCo coco : javascriptsimple__ast_ASTExpressionSequenceListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionListCoCo> javascriptsimple__ast_ASTSingleExpressionListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionListCoCo coco) {
            javascriptsimple__ast_ASTSingleExpressionListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTSingleExpressionList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTSingleExpressionListCoCo coco : javascriptsimple__ast_ASTSingleExpressionListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTLiteralListCoCo> javascriptsimple__ast_ASTLiteralListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTLiteralListCoCo coco) {
            javascriptsimple__ast_ASTLiteralListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTLiteralList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTLiteralListCoCo coco : javascriptsimple__ast_ASTLiteralListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralListCoCo> javascriptsimple__ast_ASTNumericLiteralListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralListCoCo coco) {
            javascriptsimple__ast_ASTNumericLiteralListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTNumericLiteralList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTNumericLiteralListCoCo coco : javascriptsimple__ast_ASTNumericLiteralListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTEOSListCoCo> javascriptsimple__ast_ASTEOSListCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTEOSListCoCo coco) {
            javascriptsimple__ast_ASTEOSListCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTEOSList node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTEOSListCoCo coco : javascriptsimple__ast_ASTEOSListCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptSimpleNodeCoCo> javascriptsimple__ast_ASTJavaScriptSimpleNodeCoCos = new HashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTJavaScriptSimpleNode)
         */
        public JavaScriptSimpleCoCoChecker addCoCo(javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptSimpleNodeCoCo coco) {
            javascriptsimple__ast_ASTJavaScriptSimpleNodeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {
            // execute all registered cocos of this checker
            for (javascriptsimple._cocos.JavaScriptSimpleASTJavaScriptSimpleNodeCoCo coco : javascriptsimple__ast_ASTJavaScriptSimpleNodeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            javascriptsimple__cocos_JavaScriptSimpleCoCoChecker.stream().forEach(c -> c.visit(node));
        }
}
