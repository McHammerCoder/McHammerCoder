/* generated from model null*/
/* generated by template visitor.CommonDelegatorVisitor*/



package javascriptsimple._visitor;

import java.util.Optional;

import de.se_rwth.commons.logging.Log;

/**
 * Common delegator visitor for the <code>JavaScriptSimple</code>
 * language.<br/>
 * <br/>
 * @see JavaScriptSimpleDelegatorVisitor
 */
public class CommonJavaScriptSimpleDelegatorVisitor implements JavaScriptSimpleDelegatorVisitor {

  private JavaScriptSimpleDelegatorVisitor realThis = this;

  @Override
  public void setRealThis(JavaScriptSimpleVisitor realThis) {
    if (this.realThis != realThis) {
      if (!(realThis instanceof JavaScriptSimpleDelegatorVisitor)) {
          Log.error("0xA7111_202 realThis of JavaScriptSimpleDelegatorVisitor must be JavaScriptSimpleDelegatorVisitor itself.");
      }
      this.realThis = (JavaScriptSimpleDelegatorVisitor) realThis;
      // register the known delegates to the realThis (and therby also set their new realThis)
        if (this.javascriptsimple__visitor_JavaScriptSimpleVisitor.isPresent()) {
          this.set_javascriptsimple__visitor_JavaScriptSimpleVisitor(javascriptsimple__visitor_JavaScriptSimpleVisitor.get());
        }
    }
  }

  @Override
  public JavaScriptSimpleDelegatorVisitor getRealThis() {
    return realThis;
  }

    
    
    private Optional<javascriptsimple._visitor.JavaScriptSimpleVisitor> javascriptsimple__visitor_JavaScriptSimpleVisitor = Optional.empty();
    
    public void set_javascriptsimple__visitor_JavaScriptSimpleVisitor(javascriptsimple._visitor.JavaScriptSimpleVisitor javascriptsimple__visitor_JavaScriptSimpleVisitor) {
      this.javascriptsimple__visitor_JavaScriptSimpleVisitor = Optional.ofNullable(javascriptsimple__visitor_JavaScriptSimpleVisitor);
      if (this.javascriptsimple__visitor_JavaScriptSimpleVisitor.isPresent()) {
        this.javascriptsimple__visitor_JavaScriptSimpleVisitor.get().setRealThis(getRealThis());
      }
      // register the javascriptsimple._visitor.JavaScriptSimpleVisitor also to realThis if not this
      if (getRealThis() != this) {
        // to prevent recursion we must differentiate between realThis being
        // the current this or another instance.
        getRealThis().set_javascriptsimple__visitor_JavaScriptSimpleVisitor(javascriptsimple__visitor_JavaScriptSimpleVisitor);
      }
    }

    public Optional<javascriptsimple._visitor.JavaScriptSimpleVisitor> get_javascriptsimple__visitor_JavaScriptSimpleVisitor() {
      return javascriptsimple__visitor_JavaScriptSimpleVisitor;
    }

}
