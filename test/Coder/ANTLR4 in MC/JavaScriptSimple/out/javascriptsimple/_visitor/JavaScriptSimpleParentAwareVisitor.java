/* generated from model null*/
/* generated by template visitor.ParentAwareVisitor*/



package javascriptsimple._visitor;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Stack;

import javascriptsimple._ast.ASTJavaScriptSimpleNode;
import de.monticore.ast.ASTNode;


/**
* The ParentAwareVisitor of the language keeps track of the parent nodes during a traversal.<br/>
* <br/>
* <b>Access current parent</b>: use {@code getParent()} to access the current parent.<br/>
* <br/>
* <b>Access the complete parents list:</b> use {@code getParents()} to access a list of all parents.<br/>
*/
public abstract class JavaScriptSimpleParentAwareVisitor  implements JavaScriptSimpleVisitor {

  final Stack<ASTJavaScriptSimpleNode> parents = new Stack<>();

  public Optional<ASTJavaScriptSimpleNode> getParent() {
    if (!parents.isEmpty()) {
      ASTJavaScriptSimpleNode topElement = (ASTJavaScriptSimpleNode) parents.peek();
      return Optional.of(topElement);
    }
    // no parent, return an absent value
    return Optional.empty();
  }

  public List<ASTJavaScriptSimpleNode> getParents() {
    return new ArrayList<>(parents);
  }

      @Override
      public void traverse(javascriptsimple._ast.ASTJavaScriptProgram node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSourceElements node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSourceElement node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTStatement node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTStatements node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableStatement node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableDeclarations node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableDeclaration node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTInitialiser node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTExpressionSequence node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSingleExpression node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTLiteral node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTNumericLiteral node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTEOS node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTJavaScriptProgramList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSourceElementsList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSourceElementList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTStatementList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTStatementsList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableStatementList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableDeclarationsList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTVariableDeclarationList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTInitialiserList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTExpressionSequenceList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTSingleExpressionList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTLiteralList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTNumericLiteralList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(javascriptsimple._ast.ASTEOSList node) {
        parents.push(node);
        JavaScriptSimpleVisitor.super.traverse(node);
        parents.pop();
      }
}
