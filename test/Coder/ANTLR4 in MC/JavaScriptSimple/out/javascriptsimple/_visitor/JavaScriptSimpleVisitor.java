/* generated from model null*/
/* generated by template visitor.SimpleVisitor*/



package javascriptsimple._visitor;

import java.util.Iterator;
import javascriptsimple._ast.ASTJavaScriptSimpleNode;
import de.monticore.ast.ASTNode;

/**
 * Default AST-visitor for the {@code JavaScriptSimple} language.<br/>
 * <br/>
 * <b>Running a visitor</b>: Starting a traversal of an AST with root {@code astNode} is as simple as calling {@code handle(astNode)}. Note that the visitor only handles nodes of language {@code JavaScriptSimple}.<br/>
 * <br/>
 * <b>Implementing a visitor:</b><br/>
 * You should never use {@code this}, but always make use of {@link #getRealThis()}. This ensures that the visitor can be reused by composition.<br/>
 * <br/>
 * <ul>
 *   <li><b>Visiting nodes</b>: You may override the {@code visit(node)} and {@code endVisit(node)} methods to do something at specific AST-nodes.<br/><br/></li>
 *   <li><b>Traversal</b>: You may override the {@code traverse(node)} methods, if you want to change the climb down strategy for traversing children (e.g. ordering the children). Be aware of the underlying double-dispatch mechanism: probably you want to call {@code childNode.accept(getRealThis())} and <b>not</b> {@code handle(childNode)}<br/><br/></li>
 *   <li><b>Handling of nodes</b>: You may override the {@code handle(node)} methods, if you want to change its default implementation (depth-first iteration): {@code visit(node); traverse(node); endVisit(node);}<br/><br/></li>
 * </ul>
 * <b>Special node type {@code ASTNode}:</b><br/>
 * Visitors do not provide handle or traverse methods for {@code ASTNode},
 * because handling and traversal are defined in the language depending node
 * types. However, an {@link JavaScriptSimpleInheritanceVisitor} visits and
 * endVisits each node as {@code ASTNode}. Due to composition of all kinds of
 * visitors we must define the methods here in the main visitor interface.
 *
 * @see ASTJavaScriptSimpleNode#accept(JavaScriptSimpleVisitor visitor)
 */
public interface JavaScriptSimpleVisitor  {

  /**
   * Sets the visitor to use for handling and traversing nodes.
   * This method is not implemented by default and visitors intended for reusage
   * in other languages should override this method together with
   * {@link #getRealThis()} to make a visitor composable.
   * RealThis is used to allow visitor composition, where a delegating visitor
   * utilizes this setter to set another visitor as the handle/traversal
   * controller. If this method is not overridden by the language developer,
   * the visitor still can be reused, by implementing this method in a
   * decorator.
   * @param realThis the real instance to use for handling and traversing nodes.
   * @see JavaScriptSimpleDelegatorVisitor 
   */
  default public void setRealThis(JavaScriptSimpleVisitor realThis) {
    throw new UnsupportedOperationException("0xA7011_202 The setter for realThis is not implemented. You might want to implement a wrapper class to allow setting/getting realThis.");
  }

  /**
   * By default this method returns {@code this}. Visitors intended for reusage
   * in other languages should override this method together with
   * {@link #setRealThis(JavaScriptSimpleVisitor)} to make a visitor
   * composable.
   * See {@link #setRealThis(JavaScriptSimpleVisitor)} for more information.
   * @see #setRealThis(JavaScriptSimpleVisitor)
   * @see JavaScriptSimpleDelegatorVisitor
   */
  default public JavaScriptSimpleVisitor getRealThis() {
    return this;
  }
  
  /* ------------------------------------------------------------------------*/
  
  /**
   * By default this method is not called, because the default visitor only
   * visits a node in its dynamic runtime type. Use an InheritanceVisitor
   * if you want to visit a node in its super types as well.
   *
   * @param node the node that is entered 
   */
  default public void visit(ASTNode node) {
  }

  /**
   * By default this method is not called, because the default visitor only
   * visits a node in its dynamic runtime type. Use an InheritanceVisitor
   * if you want to visit a node in its super types as well.
   *
   * @param node the node that is left 
   */
  default public void endVisit(ASTNode node) {
  }
  
  /* ------------------------------------------------------------------------*/
  
  
      
      default public void visit(javascriptsimple._ast.ASTJavaScriptProgram node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTJavaScriptProgram node) {}
      
      default public void handle(javascriptsimple._ast.ASTJavaScriptProgram node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTJavaScriptProgram node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (node.getSourceElements().isPresent()) {
                  node.getSourceElements().get().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTSourceElements node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSourceElements node) {}
      
      default public void handle(javascriptsimple._ast.ASTSourceElements node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSourceElements node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getSourceElements()) {          
                  node.getSourceElements().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTSourceElement node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSourceElement node) {}
      
      default public void handle(javascriptsimple._ast.ASTSourceElement node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSourceElement node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getStatement()) {          
                  node.getStatement().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTStatement node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTStatement node) {}
      
      default public void handle(javascriptsimple._ast.ASTStatement node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTStatement node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getVariableStatement()) {          
                  node.getVariableStatement().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTStatements node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTStatements node) {}
      
      default public void handle(javascriptsimple._ast.ASTStatements node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTStatements node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getStatements()) {          
                  node.getStatements().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableStatement node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableStatement node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableStatement node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableStatement node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getVariableDeclarations()) {          
                  node.getVariableDeclarations().accept(getRealThis());
                }
                if (null != node.getEOS()) {          
                  node.getEOS().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableDeclarations node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableDeclarations node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableDeclarations node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableDeclarations node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getVariableDeclaration()) {          
                  node.getVariableDeclaration().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableDeclaration node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableDeclaration node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableDeclaration node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableDeclaration node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (node.getInitialiser().isPresent()) {
                  node.getInitialiser().get().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTInitialiser node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTInitialiser node) {}
      
      default public void handle(javascriptsimple._ast.ASTInitialiser node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTInitialiser node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getSingleExpression()) {          
                  node.getSingleExpression().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTExpressionSequence node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTExpressionSequence node) {}
      
      default public void handle(javascriptsimple._ast.ASTExpressionSequence node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTExpressionSequence node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getSingleExpressions()) {          
                  node.getSingleExpressions().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTSingleExpression node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSingleExpression node) {}
      
      default public void handle(javascriptsimple._ast.ASTSingleExpression node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSingleExpression node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (null != node.getLiteral()) {          
                  node.getLiteral().accept(getRealThis());
                }
      }
      
      default public void visit(javascriptsimple._ast.ASTLiteral node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTLiteral node) {}
      
      default public void handle(javascriptsimple._ast.ASTLiteral node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTLiteral node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(javascriptsimple._ast.ASTNumericLiteral node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTNumericLiteral node) {}
      
      default public void handle(javascriptsimple._ast.ASTNumericLiteral node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTNumericLiteral node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(javascriptsimple._ast.ASTEOS node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTEOS node) {}
      
      default public void handle(javascriptsimple._ast.ASTEOS node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTEOS node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(javascriptsimple._ast.ASTJavaScriptProgramList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTJavaScriptProgramList node) {}
      
      default public void handle(javascriptsimple._ast.ASTJavaScriptProgramList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTJavaScriptProgramList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTJavaScriptProgram> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTSourceElementsList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSourceElementsList node) {}
      
      default public void handle(javascriptsimple._ast.ASTSourceElementsList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSourceElementsList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTSourceElements> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTSourceElementList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSourceElementList node) {}
      
      default public void handle(javascriptsimple._ast.ASTSourceElementList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSourceElementList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTSourceElement> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTStatementList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTStatementList node) {}
      
      default public void handle(javascriptsimple._ast.ASTStatementList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTStatementList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTStatement> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTStatementsList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTStatementsList node) {}
      
      default public void handle(javascriptsimple._ast.ASTStatementsList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTStatementsList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTStatements> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableStatementList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableStatementList node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableStatementList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableStatementList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTVariableStatement> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableDeclarationsList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableDeclarationsList node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableDeclarationsList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableDeclarationsList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTVariableDeclarations> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTVariableDeclarationList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTVariableDeclarationList node) {}
      
      default public void handle(javascriptsimple._ast.ASTVariableDeclarationList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTVariableDeclarationList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTVariableDeclaration> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTInitialiserList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTInitialiserList node) {}
      
      default public void handle(javascriptsimple._ast.ASTInitialiserList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTInitialiserList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTInitialiser> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTExpressionSequenceList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTExpressionSequenceList node) {}
      
      default public void handle(javascriptsimple._ast.ASTExpressionSequenceList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTExpressionSequenceList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTExpressionSequence> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTSingleExpressionList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTSingleExpressionList node) {}
      
      default public void handle(javascriptsimple._ast.ASTSingleExpressionList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTSingleExpressionList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTSingleExpression> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTLiteralList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTLiteralList node) {}
      
      default public void handle(javascriptsimple._ast.ASTLiteralList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTLiteralList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTLiteral> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTNumericLiteralList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTNumericLiteralList node) {}
      
      default public void handle(javascriptsimple._ast.ASTNumericLiteralList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTNumericLiteralList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTNumericLiteral> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTEOSList node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTEOSList node) {}
      
      default public void handle(javascriptsimple._ast.ASTEOSList node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(javascriptsimple._ast.ASTEOSList node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

          Iterator<javascriptsimple._ast.ASTEOS> iter = node.iterator();
          while (iter.hasNext()) {
            iter.next().accept(getRealThis());
          }
      }
      
      default public void visit(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {}
      
      default public void endVisit(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {}
      
      default public void handle(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {
        getRealThis().visit(node);
        // no traverse() for interfaces, only concrete classes are traversed
        getRealThis().endVisit(node);
      }
    
    
}
