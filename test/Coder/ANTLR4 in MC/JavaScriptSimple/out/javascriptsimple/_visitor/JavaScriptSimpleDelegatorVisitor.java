/* generated from model null*/
/* generated by template visitor.DelegatorVisitor*/



package javascriptsimple._visitor;

import java.util.Optional;

import de.monticore.ast.ASTNode;

/**
 * Delegator visitor for the <code>JavaScriptSimple</code> language.<br/>
 * <br/>
 * Delegator visitors allow visitor composition. This comes in handy for reuse
 * of visitors implemented for a super language. Note that it is not allowed to
 * run visitors of a super-grammar on an AST of a sub language. Here, a
 * delegator visitor must wrap such a visitor and run it.<br/>
 * Also, note that visiting and endVisiting {@code ASTNode} is delegated to all
 * other registered delegates.<br/><br/>
 * realThis has to be of type JavaScriptSimpleDelegatorVisitor. Note that
 * the delegator visitors of sublanguages do inherit from this interface and
 * hence can be used.<br/>
 * Implementing classes must implement the realThis-Pattern. Delegates are
 * always registered to {#getRealThis()}. When changing realThis, the
 * implementing class should put all registered delegates to the new realThis
 * (which also will change the realThis of the delegates themselves).
 * 
 * @see JavaScriptSimpleVisitor
 * @see CommonJavaScriptSimpleDelegatorVisitor
 */
public interface JavaScriptSimpleDelegatorVisitor  extends JavaScriptSimpleInheritanceVisitor {

  @Override
  public JavaScriptSimpleDelegatorVisitor getRealThis();
  
    
    
    public void set_javascriptsimple__visitor_JavaScriptSimpleVisitor(javascriptsimple._visitor.JavaScriptSimpleVisitor javascriptsimple__visitor_JavaScriptSimpleVisitor);

    public Optional<javascriptsimple._visitor.JavaScriptSimpleVisitor> get_javascriptsimple__visitor_JavaScriptSimpleVisitor();
    
        @Override
        public default void handle(javascriptsimple._ast.ASTJavaScriptProgram node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTJavaScriptProgram node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTJavaScriptProgram node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTJavaScriptProgram node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSourceElements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSourceElements node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSourceElements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSourceElements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSourceElement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSourceElement node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSourceElement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSourceElement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTStatement node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTStatements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTStatements node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTStatements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTStatements node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableStatement node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableStatement node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableDeclarations node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableDeclarations node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableDeclarations node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableDeclarations node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableDeclaration node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableDeclaration node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableDeclaration node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableDeclaration node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTInitialiser node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTInitialiser node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTInitialiser node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTInitialiser node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTExpressionSequence node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTExpressionSequence node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTExpressionSequence node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTExpressionSequence node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSingleExpression node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSingleExpression node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSingleExpression node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSingleExpression node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTLiteral node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTNumericLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTNumericLiteral node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTNumericLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTNumericLiteral node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTEOS node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTEOS node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTEOS node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTEOS node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTJavaScriptProgramList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTJavaScriptProgramList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTJavaScriptProgramList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTJavaScriptProgramList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSourceElementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSourceElementsList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSourceElementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSourceElementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSourceElementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSourceElementList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSourceElementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSourceElementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTStatementList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTStatementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTStatementsList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTStatementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTStatementsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableStatementList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableStatementList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableDeclarationsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableDeclarationsList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableDeclarationsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableDeclarationsList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTVariableDeclarationList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTVariableDeclarationList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTVariableDeclarationList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTVariableDeclarationList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTInitialiserList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTInitialiserList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTInitialiserList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTInitialiserList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTExpressionSequenceList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTExpressionSequenceList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTExpressionSequenceList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTExpressionSequenceList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTSingleExpressionList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTSingleExpressionList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTSingleExpressionList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTSingleExpressionList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTLiteralList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTNumericLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTNumericLiteralList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTNumericLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTNumericLiteralList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTEOSList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
          @Override
          public default void traverse(javascriptsimple._ast.ASTEOSList node) {
            if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
              getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().traverse(node);
            }
          }
 
        @Override
        public default void visit(javascriptsimple._ast.ASTEOSList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTEOSList node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }
        @Override
        public default void handle(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().handle(node);
          }
        }
  
 
        @Override
        public default void visit(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
          }
        }

        @Override
        public default void endVisit(javascriptsimple._ast.ASTJavaScriptSimpleNode node) {
          if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
            getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
          }
        }


  @Override
  public default void visit(ASTNode node) {
    // delegate to all present delegates
      if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
        getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().visit(node);
      }
  }

  @Override
  public default void endVisit(ASTNode node) {
    // delegate to all present delegates 
      if (getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().isPresent()) {
        getRealThis().get_javascriptsimple__visitor_JavaScriptSimpleVisitor().get().endVisit(node);
      }
    }
}
