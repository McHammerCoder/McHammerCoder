//version "0.0.1";  //Removed for MC4
/**
 * JavaDSL is Basis
    https://github.com/antlr/grammars-v4/blob/master/ecmascript/ECMAScript.g4
    http://www.ecma-international.org/ecma-262/5.1/
 */
grammar JavaScriptSimple {

    /*========================================================================*/
    /*============================== OPTIONS =================================*/
    /*========================================================================*/

    options {
        nostring nomlcomments noslcomments noident
        //lexer lookahead = 10
    }

    /** The JavaScriptProgram represents a whole JavaScript Script
    */
    JavaScriptProgram =
        SourceElements?
    ;

    SourceElements =
        SourceElement+
    ;

    SourceElement = 
        Statement
    ;


    Statement =
        VariableStatement
    ;

    Statements =
        Statement+
    ;

    VariableStatement =
        Var WS VariableDeclarations EOS
    ;

    VariableDeclarations =
        variableDeclaration:VariableDeclaration ( KO WS variableDeclaration:VariableDeclaration )*
    ;

    VariableDeclaration =
        Identifier Initialiser?
    ;

    Initialiser =
       WS EQ SingleExpression
    ;

   
    /// PrimaryExpression :
    ///     Literal
    ExpressionSequence =
        SingleExpression ( KO WS SingleExpression )*
    ;

    SingleExpression =
        WS Literal                                                               // LiteralExpression
    ;


    Literal =
        StringLiteral
    ;

    NumericLiteral =
//        DecimalLiteral
        DecimalIntegerLiteral
    ;

    EOS = 
        SemiColon
    ;


// TOKEN
/*
    /// 7.3 Line Terminators
    token LineTerminator =
        ('\r'|'\n'|'\u2028'|'\u2029')
    ;
*/

    token SemiColon                  = ';';
    token EQ 						 = '=';
	token KO 						 = ',';
	
/// 7.6.1.1 Keywords
    token Var        = "var";


    /// 7.6 Identifier Names and Identifiers
    token Identifier =
        (IdentifierStart)+ 
    ;

    token StringLiteral =
/*
        "\"" (DoubleStringCharacter)* "\""
        | "\'" (SingleStringCharacter)* "\'"
*/
        "\"" (StringCharacter)* "\""
//        | "\'" (StringCharacter)* "\'"

    ;


/*
    token WhiteSpaces =
        ('\t'|'\u000B'|'\u000C'|'\u0020'|'\u00A0')+ //-> channel(HIDDEN)
    ;

    token UnexpectedCharacter =
        .
    ;
*/
/*
    token DoubleStringCharacter =
        ~('"'|'\\'|'\r'|'\n')
        | '\\' EscapeSequence
//        | LineContinuation
    ;

    token SingleStringCharacter =
        ~('\''|'\\'|'\r'|'\n')
        | '\\' EscapeSequence
//        | LineContinuation
    ;
*/
    fragment token StringCharacter =
        ~('\''|'"'|'\\'|'\r'|'\n')
        | '\\' EscapeSequence
//        | LineContinuation
    ;

    fragment token EscapeSequence = 
        CharacterEscapeSequence
        | HexEscapeSequence
        | UnicodeEscapeSequence
    ;

    fragment token CharacterEscapeSequence =
        SingleEscapeCharacter
    ;

    fragment token HexEscapeSequence =
        'x' HexDigit HexDigit
    ;

    fragment token UnicodeEscapeSequence =
        'u' HexDigit HexDigit HexDigit HexDigit
    ;

    fragment token SingleEscapeCharacter =
        ('\''|'"'|'\\'|'b'|'f'|'n'|'r'|'t'|'v')
    ;


    fragment token EscapeCharacter =
        SingleEscapeCharacter
        | DecimalDigit
        | ('x'|'u')
    ;
/*
    fragment token LineContinuation =
        '\\' LineTerminatorSequence 
    ;

    fragment token LineTerminatorSequence =
        "\r\n"
        | LineTerminator
    ;
*/
    fragment token DecimalDigit =
        '0'..'9'
    ;

    fragment token HexDigit =
        (('0'..'9')|('a'..'f')|('A'..'F'))
    ;


    fragment token DecimalIntegerLiteral =
        '0'
        | ('1'..'9') (DecimalDigit)*
    ;

    fragment token IdentifierStart =
        UnicodeLetter
    ;

    token WS = ('\t' | '\u000B' | '\u000C' | '\u0020' | '\u00A0')+;
    fragment token UnicodeLetter =
        ('\u0041'..'\u005A')
        | ('\u0061'..'\u007A')
        | '\u00AA'
        | '\u00B5'
        | '\u00BA'
        | ('\u00C0'..'\u00D6')
        | ('\u00D8'..'\u00F6')
        | ('\u00F8'..'\u021F')
    ;



}