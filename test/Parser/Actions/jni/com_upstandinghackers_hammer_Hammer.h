/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_upstandinghackers_hammer_Hammer */

#ifndef _Included_com_upstandinghackers_hammer_Hammer
#define _Included_com_upstandinghackers_hammer_Hammer
#ifdef __cplusplus
extern "C" {
#endif
#undef com_upstandinghackers_hammer_Hammer_BYTE_BIG_ENDIAN
#define com_upstandinghackers_hammer_Hammer_BYTE_BIG_ENDIAN 1L
#undef com_upstandinghackers_hammer_Hammer_BIT_BIG_ENDIAN
#define com_upstandinghackers_hammer_Hammer_BIT_BIG_ENDIAN 2L
#undef com_upstandinghackers_hammer_Hammer_BYTE_LITTLE_ENDIAN
#define com_upstandinghackers_hammer_Hammer_BYTE_LITTLE_ENDIAN 0L
#undef com_upstandinghackers_hammer_Hammer_BIT_LITTLE_ENDIAN
#define com_upstandinghackers_hammer_Hammer_BIT_LITTLE_ENDIAN 0L
/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    parse
 * Signature: (Lcom/upstandinghackers/hammer/Parser;[BI)Lcom/upstandinghackers/hammer/ParseResult;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_parse
  (JNIEnv *, jclass, jobject, jbyteArray, jint);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    token
 * Signature: ([BI)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_token
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    ch
 * Signature: (B)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_ch
  (JNIEnv *, jclass, jbyte);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    chRange
 * Signature: (BB)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_chRange
  (JNIEnv *, jclass, jbyte, jbyte);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    intRange
 * Signature: (Lcom/upstandinghackers/hammer/Parser;JJ)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_intRange
  (JNIEnv *, jclass, jobject, jlong, jlong);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    bits
 * Signature: (IZ)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_bits
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    int64
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_int64
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    int32
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_int32
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    int16
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_int16
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    int8
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_int8
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    uInt64
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_uInt64
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    uInt32
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_uInt32
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    uInt16
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_uInt16
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    uInt8
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_uInt8
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    whitespace
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_whitespace
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    left
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_left
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    right
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_right
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    middle
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_middle
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    action
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Ljava/lang/String;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_action
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    in
 * Signature: ([BI)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_in
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    endP
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_endP
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    nothingP
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_nothingP
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    sequence
 * Signature: ([Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_sequence
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    choice
 * Signature: ([Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_choice
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    butNot
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_butNot
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    difference
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_difference
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    xor
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_xor
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    many
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_many
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    many1
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_many1
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    repeatN
 * Signature: (Lcom/upstandinghackers/hammer/Parser;I)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_repeatN
  (JNIEnv *, jclass, jobject, jint);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    optional
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_optional
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    ignore
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_ignore
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    sepBy
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_sepBy
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    sepBy1
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_sepBy1
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    epsilonP
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_epsilonP
  (JNIEnv *, jclass);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    lengthValue
 * Signature: (Lcom/upstandinghackers/hammer/Parser;Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_lengthValue
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    and
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_and
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    not
 * Signature: (Lcom/upstandinghackers/hammer/Parser;)Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_not
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_upstandinghackers_hammer_Hammer
 * Method:    indirect
 * Signature: ()Lcom/upstandinghackers/hammer/Parser;
 */
JNIEXPORT jobject JNICALL Java_com_upstandinghackers_hammer_Hammer_indirect
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
